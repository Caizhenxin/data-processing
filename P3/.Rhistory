data1 <- read.csv("原数据（有缺失值）.csv")
View(data1)
View(data1)
View(data)
data1 <- read.csv("原数据（有缺失值）.csv")
# 删除含有NA的行
## 123
data2 <- na.omit(data1)
data1 <- read.csv("原数据（有缺失值）.csv")
# 删除含有NA的行
## 123
data2 <- na.omit(data1)
View(data2)
View(data2)
data1 <- read.csv("原数据（有缺失值）.csv")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
在R中，你可以使用几种方法来处理数据中的缺失值。这些方法包括删除含有缺失值的行、列或用均值、中位数等替换缺失值。
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
### 删除含有NA的行
data <- na.omit(data)
# 用均值替换NA（数值型数据）
data[is.na(data)] <- mean(data, na.rm = TRUE)
### 删除含有NA的行
data <- na.omit(data)
View(data)
View(data)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
### 删除含有NA的行
data <- na.omit(data)
### 删除含有NA的行
data <- na.omit(data)
# 用均值替换NA（数值型数据）
data[is.na(data)] <- mean(data, na.rm = TRUE)
# 用中位数替换NA（数值型数据）
data[is.na(data)] <- median(data, na.rm = TRUE)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
View(data)
View(data)
View(data)
View(data)
# 用均值替换NA（数值型数据）
data[is.NA(data)] <- mean(data, na.rm = TRUE)
# 用均值替换NA（数值型数据）
data[is.na(data)] <- mean(data, na.rm = TRUE)
# 用均值替换NA（数值型数据）
data[is.na(data)] <- mean(data, na.rm = TRUE)
# 用中位数替换NA（数值型数据）
data[is.na(data)] <- median(data, na.rm = TRUE)
# 找出数值型列
num_cols <- sapply(data, is.numeric)
# 对数值型列进行均值替换
data[, num_cols] <- apply(data[, num_cols], 2, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# 找出数值型列
num_cols <- sapply(data, is.numeric)
# 对数值型列进行均值替换
data[, num_cols] <- apply(data[, num_cols], 2, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# 用均值替换NA（数值型数据）
data[is.na(data)] <- mean(data, na.rm = TRUE)
# 用中位数替换NA（数值型数据）
data[is.na(data)] <- median(data, na.rm = TRUE)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
### 删除含有NA的行
data1 <- na.omit(data)
# 找出数值型列
num_cols <- sapply(data, is.numeric)
# 对数值型列进行均值替换
data[, num_cols] <- apply(data[, num_cols], 2, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
data[is.na(data)] <- mean(data, na.rm = TRUE)
# 找出数值型列
num_cols <- sapply(data, is.numeric)
# 对数值型列进行均值替换
data[, num_cols] <- apply(data[, num_cols], 2, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
View(data)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
### 删除含有NA的行
data1 <- na.omit(data)
### 删除含有NA的行
data1 <- na.omit(data)
# 删除含有NA的列
data <- data[, colSums(is.na(data)) == 0]
### 删除含有NA的行
data1.1 <- na.omit(data)
# 删除含有NA的列
data1.2 <- data[, colSums(is.na(data)) == 0]
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
### 删除含有NA的行
data1.1 <- na.omit(data)
# 删除含有NA的列
data1.2 <- data[, colSums(is.na(data)) == 0]
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
### 删除含有NA的行
data1.1 <- na.omit(data)
# 删除含有NA的列
data1.2 <- data[, colSums(is.na(data)) == 0]
# 找出数值型列
num_cols <- sapply(data, is.numeric)
# 对数值型列进行均值替换
data[, num_cols] <- apply(data[, num_cols], 2, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
View(data)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
View(data)
# 找出数值型列
num_cols <- sapply(data, is.numeric)
# 对数值型列进行均值替换
data2[, num_cols] <- apply(data[, num_cols], 2, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# 找出数值型列
num_cols <- sapply(data, is.numeric)
# 对数值型列进行均值替换
data[, num_cols] <- apply(data[, num_cols], 2, function(x)
ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# 找出数值型列
num_cols <- sapply(data, is.numeric)
# 对数值型列进行均值替换
data[, num_cols] <- apply(data[, num_cols], 2, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# 用中位数替换NA（数值型数据）
data[is.na(data)] <- median(data, na.rm = TRUE)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
# 用中位数替换NA（数值型数据）
data[is.na(data)] <- median(data, na.rm = TRUE)
# 找出数值型列
num_cols <- sapply(data, is.numeric)
# 对数值型列进行均值替换
data[, num_cols] <- apply(data[, num_cols], 2, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# 用中位数替换NA（数值型数据）
data[, num_cols] <- apply(data[, num_cols], 2, function(x) ifelse(is.na(x), median(x, na.rm = TRUE), x))
View(data)
# 找出数值型列
num_cols <- sapply(data, is.numeric)
# 对数值型列进行均值替换
data[, num_cols] <- apply(data[, num_cols], 2, function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# 用中位数替换NA（数值型数据）
data[, num_cols] <- apply(data[, num_cols], 2, function(x) ifelse(is.na(x), median(x, na.rm = TRUE), x))
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
# # 用均值替换NA（数值型数据）
# data[is.na(data)] <- mean(data, na.rm = TRUE)
#
# # 用中位数替换NA（数值型数据）
# data[is.na(data)] <- median(data, na.rm = TRUE)
#
# # 用众数替换NA（分类数据）
# data[is.na(data)] <- as.numeric(names(table(data)[table(data) == max(table(data))]))
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
View(data)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
# 删除含有NA的行
data1.1 <- na.omit(data)
# 删除含有NA的列
data1.2 <- data[, colSums(is.na(data)) == 0]
View(data1.2)
View(data1.1)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("原数据（有缺失值）.csv")
# 删除含有NA的行
data1.1 <- na.omit(data)
data <- read.csv("原数据（有缺失值）.csv")
# 删除含有NA的行
data1.1 <- na.omit(data)
# 数据的导入
data <- read.csv("原数据（有缺失值）.csv")
# 删除含有NA的行
data1.1 <- na.omit(data)
View(data1.1)
# 人口统计学变量的定义
vars <- c("gender","age","grade","only_child","higher_education")
mytable1.1 <- with(data1.1, table(gender))
mytable1.2 <- with(data1.1, table(age))
mytable1.3 <- with(data1.1, table(grade))
mytable1.4 <- with(data1.1, table(only_child))
# 人口统计学变量的定义
vars <- c("gender","age","grade","only_child","higher_education")
mytable1.1 <- with(data1.1, table(gender))
mytable1.2 <- with(data1.1, table(age))
mytable1.3 <- with(data1.1, table(grade))
mytable1.4 <- with(data1.1, table(only_child))
mytable1.1
# 人口统计学变量的定义
vars <- c("gender","age","grade","only_child","higher_education")
mytable1.1 <- with(data1.1, table(gender))
mytable1.2 <- with(data1.1, table(age))
mytable1.3 <- with(data1.1, table(grade))
mytable1.4 <- with(data1.1, table(only_child))
mytable1.1 <- with(data1.1, table(higher_education))
mytable1.1
mytable1.2
mytable1.3
mytable1.4
# 数据的导入
data <- read.csv("原数据（有缺失值）.csv")
# 删除含有NA的行
data1.1 <- na.omit(data)
# 人口统计学变量的定义
vars <- c("gender","age","grade","only_child","higher_education")
mytable1.1 <- with(data1.1, table(gender))#
mytable1.2 <- with(data1.1, table(age))
mytable1.3 <- with(data1.1, table(grade))
mytable1.4 <- with(data1.1, table(only_child))
mytable1.1 <- with(data1.1, table(higher_education))
mytable1.1
mytable1.2
mytable1.3
mytable1.4
View(data1.1)
mytable1.1
# 人口统计学变量的定义
vars <- c("gender","age","grade","only_child","higher_education")
mytable1.1 <- with(data1.1, table(gender))#
mytable1.2 <- with(data1.1, table(age))
mytable1.3 <- with(data1.1, table(grade))
mytable1.4 <- with(data1.1, table(only_child))
mytable1.5 <- with(data1.1, table(higher_education))
mytable1.1
mytable1.2
mytable1.3
mytable1.4
mytable1.5
View(data)
# 数据的导入
data <- read.csv("原数据（有缺失值）.csv")
# 删除含有NA的行
data1.1 <- na.omit(data)
# 人口统计学变量的定义
vars <- c("gender","age","grade","only_child","higher_education")
mytable1.1 <- with(data1.1, table(gender))            #性别：1-男；2-女
mytable1.2 <- with(data1.1, table(age))               #年龄
mytable1.3 <- with(data1.1, table(grade))             #年级：
mytable1.4 <- with(data1.1, table(only_child))        #独生子女：1-独生子女；2-非独生子女
mytable1.5 <- with(data1.1, table(higher_education))
# 打印变量
mytable1.1
mytable1.2
mytable1.3
mytable1.4
mytable1.5
View(data1.1)
# 数据的导入
data <- read.csv("原数据（有缺失值）.csv")
# 删除含有NA的行
data1.1 <- na.omit(data)
# 人口统计学变量的定义
vars <- c("gender","age","grade","only_child","higher_education")
mytable1.1 <- with(data1.1, table(gender))            #性别：1-男；2-女
mytable1.2 <- with(data1.1, table(age))               #年龄
mytable1.3 <- with(data1.1, table(grade))             #年级：
mytable1.4 <- with(data1.1, table(only_child))        #独生子女：1-独生子女；2-非独生子女
mytable1.5 <- with(data1.1, table(higher_education))
# 打印变量
mytable1.1
mytable1.2
mytable1.3
mytable1.4
mytable1.5
